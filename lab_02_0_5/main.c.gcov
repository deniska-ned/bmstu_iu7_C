        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:9
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:
        -:    4:#define MIN_ARRAY_LEN 1
        -:    5:#define MAX_ARRAY_LEN 10
        -:    6:
        -:    7:// fun input_array
        -:    8:#define INCORRECT_DATA -1
        -:    9:#define INCORRECT_INPUT_ARRAY_LEN -2
        -:   10:#define NOT_ENOUGH_ELEM -3
        -:   11:
        -:   12:// fun main
        -:   13:#define OKAY 0
        -:   14:#define INCORRECT_DATA_ERROR 1
        -:   15:#define INCORRECT_INPUT_ARRAY_LEN_ERROR 2
        -:   16:#define NOT_ENOUGH_ELEM_ERROR 3
        -:   17:#define INCORRECT_OUTPUT_DATA_ERROR 2
        -:   18:
        9:   19:int input_array(float *p_start, float **p_end)
        -:   20:{
        -:   21:    int arr_len;
        9:   22:    int rc = scanf("%d", &arr_len);
        -:   23:
        9:   24:    if (1 != rc)
        1:   25:        return INCORRECT_DATA;
        -:   26:
        8:   27:    if (arr_len < MIN_ARRAY_LEN || arr_len > MAX_ARRAY_LEN)
        2:   28:        return INCORRECT_INPUT_ARRAY_LEN;
        -:   29:
        6:   30:    *p_end = p_start + arr_len;
        -:   31:
       19:   32:    for (float *p = p_start; p < *p_end; ++p)
        -:   33:    {
       16:   34:        rc = scanf("%f", p);
       16:   35:        if (rc != 1)
        -:   36:        {
        -:   37:            char c;
        3:   38:            rc = scanf("%c", &c);
        3:   39:            if (1 == rc && c != ' ' && c != '\n')
        2:   40:                return INCORRECT_DATA;
        -:   41:
        1:   42:            return NOT_ENOUGH_ELEM;
        -:   43:        }
        -:   44:    }
        -:   45:
        3:   46:    return 0;
        -:   47:}
        -:   48:
        3:   49:int search_max_sum(const float *p_start, const float *p_end, float *max_sum)
        -:   50:{
        3:   51:    if (p_start >= p_end)
    #####:   52:        return INCORRECT_DATA;
        -:   53:
        3:   54:    float *p_s = (float *) p_start, *p_e = (float *) p_end - 1;
        9:   55:    for (; p_s <= p_e; ++p_s, --p_e)
        6:   56:        if (p_start == p_s || *p_s + *p_e > *max_sum)
        5:   57:            *max_sum = *p_s + *p_e;
        -:   58:
        3:   59:    return OKAY;
        -:   60:}
        -:   61:
        9:   62:int main(void)
        -:   63:{
        -:   64:    float arr[2 * MAX_ARRAY_LEN];
        -:   65:
        9:   66:    float *p_start = arr, *p_end = NULL;
        -:   67:
        9:   68:    int input_array_res = input_array(p_start, &p_end);
        -:   69:
        9:   70:    switch (input_array_res)
        -:   71:    {
        3:   72:        case INCORRECT_DATA:
        3:   73:            printf("Incorrect data\n");
        3:   74:            return INCORRECT_DATA_ERROR;
        2:   75:        case INCORRECT_INPUT_ARRAY_LEN:
        2:   76:            printf("Incorrect array len\n");
        2:   77:            return INCORRECT_INPUT_ARRAY_LEN_ERROR;
        1:   78:        case NOT_ENOUGH_ELEM:
        1:   79:            printf("Not enough elements\n");
        1:   80:            return NOT_ENOUGH_ELEM_ERROR;
        3:   81:        default:
        3:   82:            break;
        -:   83:    }
        -:   84:
        -:   85:    float max_sum;
        3:   86:    int search_max_sum_res = search_max_sum(p_start, p_end, &max_sum);
        -:   87:
        3:   88:    if (INCORRECT_DATA == search_max_sum_res)
        -:   89:    {
    #####:   90:        printf("Incorrect output data\n");
    #####:   91:        return INCORRECT_OUTPUT_DATA_ERROR;
        -:   92:    }
        -:   93:
        3:   94:    printf("%.5f\n", max_sum);
        -:   95:
        3:   96:    return OKAY;
        -:   97:}
