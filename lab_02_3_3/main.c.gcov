        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:8
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:
        -:    4:#define MIN_ARRAY_LEN 1
        -:    5:#define MAX_ARRAY_LEN 10
        -:    6:
        -:    7:// fun input_array
        -:    8:#define INCORRECT_DATA -1
        -:    9:#define INCORRECT_INPUT_ARRAY_LEN -2
        -:   10:#define NOT_ENOUGH_ELEM -3
        -:   11:
        -:   12:// fun print_array
        -:   13:#define INCORRECT_OUTPUT_ARRAY_LEN 1
        -:   14:
        -:   15:// fun main
        -:   16:#define OKAY 0
        -:   17:#define INCORRECT_DATA_ERROR 1
        -:   18:#define INCORRECT_INPUT_ARRAY_LEN_ERROR 2
        -:   19:#define NOT_ENOUGH_ELEM_ERROR 3
        -:   20:#define INCORRECT_OUTPUT_ARRAY_LEN_ERROR 4
        -:   21:
        8:   22:int input_array(int *arr)
        -:   23:{
        -:   24:    int arr_len;
        8:   25:    int rc = scanf("%d", &arr_len);
        -:   26:
        8:   27:    if (1 != rc)
        1:   28:        return INCORRECT_DATA;
        -:   29:
        7:   30:    if (arr_len < MIN_ARRAY_LEN || arr_len > MAX_ARRAY_LEN)
        2:   31:        return INCORRECT_INPUT_ARRAY_LEN;
        -:   32:
       13:   33:    for (int i = 0; i < arr_len; ++i)
        -:   34:    {
       11:   35:        rc = scanf("%d", &arr[i]);
       11:   36:        if (rc != 1)
        -:   37:        {
        -:   38:            char c;
        3:   39:            rc = scanf("%c", &c);
        3:   40:            if (1 == rc && c != ' ' && c != '\n')
        2:   41:                return INCORRECT_DATA;
        -:   42:
        1:   43:            return NOT_ENOUGH_ELEM;
        -:   44:        }
        -:   45:    }
        -:   46:
        2:   47:    return arr_len;
        -:   48:}
        -:   49:
        2:   50:int print_array(const int *arr, const int arr_len)
        -:   51:{
        2:   52:    if (arr_len < 0)
    #####:   53:        return INCORRECT_OUTPUT_ARRAY_LEN;
        -:   54:
        9:   55:    for (int i = 0; i < arr_len; ++i)
        7:   56:        printf("%d ", arr[i]);
        -:   57:
        2:   58:    return OKAY;
        -:   59:}
        -:   60:
        2:   61:int reverse_num(int number)
        -:   62:{
        2:   63:    number = abs(number);
        2:   64:    int res = 0;
        -:   65:
        6:   66:    while (number)
        -:   67:    {
        4:   68:        int digit = number % 10;
        4:   69:        res = 10 * res + digit;
        4:   70:        number /= 10;
        -:   71:    }
        -:   72:
        2:   73:    return res;
        -:   74:}
        -:   75:
        2:   76:void add_reverse_pos_numbers(int *arr, int *arr_len)
        -:   77:{
        7:   78:    for (int i = 0; i < *arr_len; ++i)
        5:   79:        if (arr[i] > 0)
        -:   80:        {
        5:   81:            for (int j = *arr_len; j > i + 1; --j)
        3:   82:                arr[j] = arr[j - 1];
        2:   83:            arr[i + 1] = reverse_num(arr[i]);
        2:   84:            ++i;
        2:   85:            ++*arr_len;
        -:   86:        }
        2:   87:}
        -:   88:
        8:   89:int main(void)
        -:   90:{
        -:   91:    int arr[2 * MAX_ARRAY_LEN], arr_len;
        -:   92:
        8:   93:    int input_array_res = input_array(arr);
        -:   94:
        8:   95:    switch (input_array_res)
        -:   96:    {
        3:   97:        case INCORRECT_DATA:
        3:   98:            printf("Incorrect data\n");
        3:   99:            return INCORRECT_DATA_ERROR;
        2:  100:        case INCORRECT_INPUT_ARRAY_LEN:
        2:  101:            printf("Incorrect array len\n");
        2:  102:            return INCORRECT_INPUT_ARRAY_LEN_ERROR;
        1:  103:        case NOT_ENOUGH_ELEM:
        1:  104:            printf("Not enough elements\n");
        1:  105:            return NOT_ENOUGH_ELEM_ERROR;
        2:  106:        default:
        2:  107:            arr_len = input_array_res;
        2:  108:            break;
        -:  109:    }
        -:  110:
        2:  111:    add_reverse_pos_numbers(arr, &arr_len);
        -:  112:
        2:  113:    int print_array_res = print_array(arr, arr_len);
        -:  114:
        2:  115:    if (INCORRECT_OUTPUT_ARRAY_LEN == print_array_res)
        -:  116:    {
    #####:  117:        printf("Incorrect output array len\n");
    #####:  118:        return INCORRECT_OUTPUT_ARRAY_LEN_ERROR;
        -:  119:    }
        -:  120:
        2:  121:    return OKAY;
        -:  122:}
