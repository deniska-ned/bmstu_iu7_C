        -:    0:Source:funcs.c
        -:    0:Graph:funcs.gcno
        -:    0:Data:funcs.gcda
        -:    0:Runs:6
        -:    1:#include "funcs.h"
        -:    2:
        4:    3:int find_avg_value(FILE *f, float *avg)
        -:    4:{
        4:    5:    rewind(f);
        -:    6:
        4:    7:    int rc = 0;
        4:    8:    int num_count = 0;
        4:    9:    float sum = 0.0, num;
        -:   10:
        9:   11:    while (1 == (rc = fscanf(f, "%f", &num)))
        -:   12:    {
        5:   13:        sum += num;
        5:   14:        ++num_count;
        -:   15:    }
        -:   16:
        -:   17:    char c;
        4:   18:    if (1 == (rc = fscanf(f, "%c", &c)))
        1:   19:        return INCORRECT_SYMBOL;
        -:   20:
        3:   21:    if (0 == num_count)
        1:   22:        return NOT_ENOUGH_NUM;
        -:   23:
        2:   24:    *avg = sum / num_count;
        2:   25:    return OKAY;
        -:   26:}
        -:   27:
        2:   28:int find_similar(FILE *f, const float avg, float *similar)
        -:   29:{
        2:   30:    fseek(f, 0, SEEK_SET);
        -:   31:
        2:   32:    int rc = 0;
        -:   33:    float num;
        -:   34:
        2:   35:    if (1 == (rc = fscanf(f, "%f", &num)))
        2:   36:        *similar = num;
        -:   37:    else
    #####:   38:        return NOT_ENOUGH_NUM;
        -:   39:
        4:   40:    while (1 == (rc = fscanf(f, "%f", &num)))
        2:   41:        if (fabs(avg - *similar) > fabs(avg - num))
        1:   42:            *similar = num;
        -:   43:
        -:   44:    char c;
        -:   45:
        2:   46:    if (1 == (rc = fscanf(f, "%c", &c)))
    #####:   47:        return INCORRECT_SYMBOL;
        -:   48:
        2:   49:    return OKAY;
        -:   50:}
