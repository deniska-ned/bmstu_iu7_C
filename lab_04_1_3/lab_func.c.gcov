        -:    0:Source:lab_func.c
        -:    0:Graph:lab_func.gcno
        -:    0:Data:lab_func.gcda
        -:    0:Runs:7
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:
        -:    4:#include "lab_func.h"
        -:    5:
        6:    6:int str_split(char *str, char words[][MAX_WORD_LEN + 1], int *words_count)
        -:    7:{
        6:    8:    *words_count = 0;
        -:    9:    char *p;
        -:   10:
        6:   11:    p = strtok(str, WORD_SEP);
        -:   12:
       21:   13:    while (p)
        -:   14:    {
       16:   15:        if (strlen(p) > MAX_WORD_LEN)
        1:   16:            return INCORRECT_WORD_LEN;
        -:   17:
       15:   18:        strcpy(words[*words_count], p);
       15:   19:        p = strtok(NULL, WORD_SEP);
       15:   20:        ++*words_count;
        -:   21:    }
        -:   22:
        5:   23:    return OKAY;
        -:   24:}
        -:   25:
        7:   26:int form_req_word(char *word, char *req_word)
        -:   27:{
        7:   28:    if (strlen(word) > MAX_WORD_LEN)
    #####:   29:        return INCORRECT_WORD_LEN;
        -:   30:
        7:   31:    int sym_i = 0;
       34:   32:    for (char *p = word; *p; ++p)
       27:   33:        if (p == strchr(word, *p))
       24:   34:            req_word[sym_i++] = *p;
        7:   35:    req_word[sym_i] = '\0';
        -:   36:
        7:   37:    return OKAY;
        -:   38:}
        -:   39:
        5:   40:int form_req_str(char words[][MAX_WORD_LEN + 1], const int words_count,
        -:   41:char *req_str)
        -:   42:{
        5:   43:    strcpy(req_str, "");
        -:   44:
        5:   45:    if (words_count <= 1)
        1:   46:        return OKAY;
        -:   47:
        4:   48:    req_str[0] = '\0';
        -:   49:
        -:   50:    char last_word[MAX_WORD_LEN + 1];
        4:   51:    strcpy(last_word, words[words_count - 1]);
        -:   52:
       14:   53:    for (int i = words_count - 2; i >= 0; --i)
       10:   54:        if (strcmp(words[i], last_word) != 0)
        -:   55:        {
        -:   56:            char req_word[MAX_WORD_LEN + 1];
        -:   57:
        7:   58:            if (INCORRECT_WORD_LEN == form_req_word(words[i], req_word))
    #####:   59:                return INCORRECT_WORD_LEN;
        -:   60:
        7:   61:            strcat(req_str, req_word);
        7:   62:            strcat(req_str, " ");
        -:   63:        }
        4:   64:    req_str[strlen(req_str) - 1] = '\0';
        -:   65:
        4:   66:    return OKAY;
        -:   67:}
        -:   68:
        5:   69:int print_res(char *str)
        -:   70:{
        5:   71:    if (strlen(str) == 0)
        2:   72:        return INCORRECT_WORD_LEN;
        -:   73:
        3:   74:    printf("Result: %s\n", str);
        3:   75:    return OKAY;
        -:   76:}
        -:   77:
       17:   78:int error_processing(const int exit_code)
        -:   79:{
       17:   80:    switch (exit_code)
        -:   81:    {
       13:   82:        case OKAY:
       13:   83:            return OKAY;
    #####:   84:        case INCORRECT_INPUT:
    #####:   85:            return INCORRECT_INPUT_ERROR;
        3:   86:        case INCORRECT_WORD_LEN:
        3:   87:            return INCORRECT_WORD_LEN_ERROR;
        1:   88:        default:
        1:   89:            fprintf(stderr, UNKNOWN_ERROR_MESS);
        1:   90:            return UNKNOWN_ERROR_ERROR;
        -:   91:    }
        -:   92:}
